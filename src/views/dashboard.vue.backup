<template>
  <div aria-live="polite" aria-atomic="true" class="toast-alerts">
    <div class="toast-container">
      <div
        class="toast bg-light"
        id="toastLive"
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
      >
        <div class="toast-header">
          <strong class="me-auto">Bootstrap2</strong>
          <small>just now</small>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="toast"
            aria-label="Close"
          ></button>
        </div>
        <div class="toast-body">Hello, world! This is a toast message.</div>
      </div>
    </div>
  </div>
  <div class="card-group">
    <div
      id="customCardDashboard"
      class="card"
      v-for="(item, index) in machines"
      :key="index"
      style="min-width: 14rem; margin: auto"
    >
      <div class="card-body">
        <vue-speedometer
          :maxSegmentLabels="0"
          :segments="5"
          :needleHeightRatio="0.6"
          :value="machinesProdValue[index]"
          :maxValue="machinesMaxProdValue[index]"
          :width="100"
          :height="60"
          :ringWidth="30"
        />
        <h5 class="card-title">{{ machines[index]["main"]["id"] }}</h5>
        <p class="card-text">
          {{
            productList[
              productList
                .map((x) => x.cod_gp)
                .indexOf(String(machines[index]["main"]["current_cod_gp"]), 0)
            ].name_gp
          }}
        </p>
        <a
          class="btn btn-primary"
          :class="{
            greenClass: machineState[index] === 'greenClass',
            redClass: machineState[index] === 'redClass',
            greyClass: machineState[index] === 'greyClass',
          }"
          @click="toastMethod"
          >Go somewhere</a
        >
      </div>
    </div>
  </div>
</template>

<script>
// @ is an alias to /src
import VueSpeedometer from "vue-speedometer";
import axios from "axios";
import { Toast } from "bootstrap/dist/js/bootstrap.esm.min";
import { onUnmounted } from "vue";
export default {
  // eslint-disable-next-line vue/multi-word-component-names
  name: "dashboard",
  data() {
    onUnmounted(() => {
      console.log("unmounted");
      clearInterval(this.interValue);
    });
    return {
      machineErrors: [],
      machines: [],
      checkedMachines: [],
      checkedZone: [],
      productList: [],
      machineState: [],
      interValue: null,
      machinesMaxProdValue: [],
      machinesProdValue: [],
    };
  },
  components: {
    VueSpeedometer,
  },
  methods: {
    async getIds() {
      const f = await fetch(
        "http://192.168.100.100/terminal/markstation/get_all_stat"
      );
      const data = await f.json();
      //console.log(data);
      this.machines = data;
      let machineState = [];
      let machinesMaxProdValue = [];
      let machinesProdValue = [];
      for (let i = 0; i < this.machines.length; i++) {
        let y = null;
        if (data[i]["options"]["last_seen_timeout"] > 90) {
          y = "greyClass";
        } else if (data[i]["plc_state"]["machine_status"] === "1") {
          y = "greenClass";
        } else {
          y = "redClass";
        }
        machineState.push(String(y));
        machinesMaxProdValue.push(
          this.machines[i]["options"]["max_items_per_minute"]
        );
        machinesProdValue.push(this.machines[i]["options"]["items_per_minute"]);
      }
      //console.log("machineState = " + machineState);
      console.log("machineState");
      this.machineState = machineState;
      this.machinesMaxProdValue = machinesMaxProdValue;
      this.machinesProdValue = machinesProdValue;
      //console.log(this.machinesProdValue);
    },
    checkedIds() {
      // Auto checking the checkboxes
      for (let i = 0; i < 30; i++) {
        this.checkedMachines.push(true);
        this.checkedZone.push(true);
      }
    },
    getProduct() {
      const path =
        "http://192.168.100.100/terminal/markstation/get_product_list";
      axios.get(path).then((res) => {
        this.productList = res.data;
        console.log("getProduct");
        this.getIds();
      });
    },
    interVal() {
      if (this.interValue) return;
      const interValue = setInterval(() => {
        this.getIds();
      }, 10000);
      this.interValue = interValue;
    },
    toastMethod() {
      const toastLive = document.getElementById("toastLive");
      const toast = new Toast(toastLive);
      toast.show();
      console.log("hello");
    },
  },
  created() {
    console.log("created");
    this.getProduct();
    this.checkedIds();
    this.interVal();
  },
};
</script>
